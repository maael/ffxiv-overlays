{"version":3,"file":"static/webpack/static/development/pages/t/sparky.js.a99f1a1aeea5a4846b16.hot-update.js","sources":["webpack:///./pages/t/sparky.tsx"],"sourcesContent":["import React from 'react';\nimport {Sparklines, SparklinesLine} from 'react-sparklines';\nimport simulator from '../../util/simulator';\nimport jobColours from '../../util/colours'\nimport {CombatantOptions, EncounterOptions} from '../../util/types';\n\ntype EncOverType = Map<string, number[]>;\n\ninterface State {\n  Combatant?: Record<string, Partial<Record<CombatantOptions, string>>>;\n  Encounter?: Partial<Record<EncounterOptions, string>>;\n  isActive?: boolean;\n  encOverTime: EncOverType;\n}\n\nexport default class Sparky extends React.Component<State> {\n  state: State = {\n    encOverTime: new Map()\n  };\n  simulator?: NodeJS.Timeout;\n  componentDidMount () {\n    if (typeof window === 'undefined') return;\n    document.addEventListener('onOverlayDataUpdate', this.onOverlayDataUpdate);\n    window.addEventListener('message', (e) => {\n      if (e.data.type === 'onOverlayDataUpdate') {\n        this.onOverlayDataUpdate(e.data);\n      }\n    });\n    if (window.location.search.includes('simulator')) {\n      this.simulator(1000);\n    }\n  }\n  componentWillUnmount () {\n    if (simulator) clearInterval(this.simulator);\n  }\n  onOverlayDataUpdate = (data: any) => {\n    const Combatant: Record<string, Partial<Record<CombatantOptions, string>>> = data.detail.Combatant;\n    const {encOverTime} = this.state;\n    Object.entries(Combatant).forEach(([k, v]) => {\n      encOverTime.set(k, [...(encOverTime.get(k) || []).splice(-25), Number(v.encdps)])\n    });\n    this.setState({...data.detail, encOverTime});\n  }\n  renderCombatant = ([k, v]) => {\n    const upperJob = (v.Job || '').toUpperCase();\n    const jobColour = jobColours(upperJob);\n    return (\n      <div style={{float: 'left', padding: '0 15px', textAlign: 'center', width: 200, color: '#FFFFFF', fontWeight: 'bold', textShadow: `0 0 5px ${jobColour}`}} key={v.name}>\n        <Sparklines data={this.state.encOverTime.get(k)} height={50}>\n          <SparklinesLine style={{}} color={jobColour} />\n        </Sparklines>\n        <div style={{fontSize: '0.8em'}}>{v.name} ({upperJob})</div>\n        <div>{v.encdps}</div>\n      </div>\n    )\n  }\n  render () {\n    const {Combatant} = this.state;\n    const filters = ['YOU 0', 'YOU']\n    const Combatants = Combatant\n      ? Object.entries(Combatant)\n          .filter(([k, v]) => filters.includes(k))\n          .sort(([_k1, v1], [_k2, v2]) => Number(v2.encdps) - Number(v1.encdps))\n          .map(this.renderCombatant)\n      : null;\n    return (\n      <>\n        <style global jsx>{`\n          body {\n            font-family: sans-serif;\n          }\n        `}</style>\n        {Combatants}\n      </>\n    );\n  }\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAWA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;;;AAkBA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;;AApCA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAsBA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAAA;AAAA;AASA;;;;AA5DA;AACA;;;;;A","sourceRoot":""}