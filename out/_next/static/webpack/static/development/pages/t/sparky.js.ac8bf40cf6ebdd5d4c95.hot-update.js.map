{"version":3,"file":"static/webpack/static/development/pages/t/sparky.js.ac8bf40cf6ebdd5d4c95.hot-update.js","sources":["webpack:///./pages/t/sparky.tsx"],"sourcesContent":["import React from 'react';\nimport {Sparklines, SparklinesLine} from 'react-sparklines';\nimport ActBase, {State as ActBaseState} from '../../components/ActBase';\nimport Settings from '../../components/Settings';\nimport DragCorner from '../../components/DragCorner';\nimport jobColours from '../../util/colours'\nimport {jobRoleMap} from '../../util/roles';\nimport {RoleColoursLight} from '../../util/types';\n\ninterface State {\n  encOverTime: Map<string, number[]>;\n}\n\nexport default class Sparky extends React.Component<State> {\n  state: State = {\n    encOverTime: new Map()\n  };\n  onBecomeActive() {\n    this.setState({encOverTime: new Map()});\n  }\n  onOverlayDataUpdate = ({Combatant}: ActBaseState) => {\n    if (!Combatant) return;\n    const {encOverTime} = this.state;\n    Object.entries(Combatant).forEach(([k, v]) => {\n      encOverTime.set(k, [...(encOverTime.get(k) || []).splice(-25), Number(v.encdps)].filter((i) => !isNaN(i)))\n    });\n    this.setState({encOverTime});\n  }\n  renderCombatant = ([k, v]) => {\n    const upperJob = (v.Job || '').toUpperCase();\n    const jobColour = jobColours(upperJob);\n    const role = jobRoleMap[upperJob];\n    return (\n      <div className={`${role}-sparks`} style={{float: 'left', padding: '0 15px', textAlign: 'center', width: 200, color: '#FFFFFF', fontWeight: 'bold', textShadow: `0 0 5px ${jobColour}`}} key={v.name}>\n        <Sparklines data={this.state.encOverTime.get(k)} height={50}>\n          <SparklinesLine style={{fillOpacity: 0.5}} color={jobColour} />\n        </Sparklines>\n        <div style={{fontSize: '0.8em'}}>{v.name} ({upperJob})</div>\n        <div>{v.encdps}</div>\n      </div>\n    )\n  }\n  render () {\n    return (\n      <ActBase onOverlayDataUpdate={this.onOverlayDataUpdate} onBecomeActive={this.onBecomeActive}>\n        {({Combatant}) => {\n          const filters = ['YOU 0', 'YOU']\n          const Combatants = Combatant\n            ? Object.entries(Combatant)\n                .filter(([k, v]) => filters.indexOf(k) > -1)\n                .sort(([_k1, v1], [_k2, v2]) => Number(v2.encdps) - Number(v1.encdps))\n                .map(this.renderCombatant)\n            : null;\n          return (\n            <Settings<{a?: string}>>\n              <style global jsx>{`\n                body {\n                  font-family: sans-serif;\n                }\n                svg polyline:first-of-type {\n                  fill-opacity: 0.5 !important;\n                }\n                svg circle {\n                  fill: none !important;\n                }\n                .HEALER-sparks svg polyline:first-of-type {\n                  fill: ${RoleColoursLight.HEALER} !important;\n                }\n                .TANK-sparks svg polyline:first-of-type {\n                  fill: ${RoleColoursLight.TANK} !important;\n                }\n                .DPS-sparks svg polyline:first-of-type {\n                  fill: ${RoleColoursLight.DPS} !important;\n                }\n              `}</style>\n              <DragCorner />\n              {Combatants}\n            </Settings>\n          );\n        }}\n      </ActBase>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAKA;AAAA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;;AAzBA;AACA;AAAA;AAAA;AACA;;;AAuBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;;;;AArEA;AACA;;;;;A","sourceRoot":""}