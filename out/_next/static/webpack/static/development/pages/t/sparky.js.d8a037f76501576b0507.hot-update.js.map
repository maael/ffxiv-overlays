{"version":3,"file":"static/webpack/static/development/pages/t/sparky.js.d8a037f76501576b0507.hot-update.js","sources":["webpack:///./pages/t/sparky.tsx","webpack:///./util/colours.ts","webpack:///./util/roles.ts","webpack:///./util/types.ts"],"sourcesContent":["import React from 'react';\nimport {Sparklines, SparklinesLine, SparklinesSpots} from 'react-sparklines';\nimport simulator from '../../util/simulator';\nimport jobColours from '../../util/colours'\nimport {CombatantOptions, EncounterOptions} from '../../util/types';\n\ntype EncOverType = Map<string, number[]>;\n\ninterface State {\n  Combatant?: Record<string, Partial<Record<CombatantOptions, string>>>;\n  Encounter?: Partial<Record<EncounterOptions, string>>;\n  isActive?: boolean;\n  encOverTime: EncOverType;\n}\n\nexport default class Sparky extends React.Component<State> {\n  state: State = {\n    encOverTime: new Map()\n  };\n  componentDidMount () {\n    if (typeof window === 'undefined') return;\n    document.addEventListener('onOverlayDataUpdate', this.onOverlayDataUpdate);\n    window.addEventListener('message', (e) => {\n      if (e.data.type === 'onOverlayDataUpdate') {\n        this.onOverlayDataUpdate(e.data);\n      }\n    });\n    if (window.location.search.includes('simulator')) {\n      simulator(1000);\n    }\n  }\n  onOverlayDataUpdate = (data: any) => {\n    const Combatant: Record<string, Partial<Record<CombatantOptions, string>>> = data.detail.Combatant;\n    const {encOverTime} = this.state;\n    Object.entries(Combatant).forEach(([k, v]) => {\n      encOverTime.set(k, [...(encOverTime.get(k) || []).splice(-20), Number(v.encdps)])\n    });\n    this.setState({...data.detail, encOverTime});\n  }\n  renderCombatant = ([k, v]) => (\n    <div style={{float: 'left', padding: '0 15px', textAlign: 'center'}} key={v.name}>\n      <Sparklines data={this.state.encOverTime.get(k)} height={100}>\n        <SparklinesLine style={{}} color={jobColours((v.Job || '').toUpperCase())} />\n      </Sparklines>\n      <div style={{fontSize: '0.8em'}}>{v.name} ({(v.Job || '').toUpperCase()})</div>\n      <div>{v.encdps}</div>\n    </div>\n  )\n  render () {\n    const {Combatant} = this.state;\n    const filters = ['YOU 0', 'YOU']\n    const Combatants = Combatant\n      ? Object.entries(Combatant)\n          .filter(([k, v]) => filters.includes(k))\n          .sort(([_k1, v1], [_k2, v2]) => Number(v2.encdps) - Number(v1.encdps))\n          .map(this.renderCombatant)\n      : null;\n    return (\n      <>\n        <style global jsx>{`\n          body {\n            font-family: sans-serif;\n          }\n        `}</style>\n        {Combatants}\n      </>\n    );\n  }\n}\n\n","import {jobRoleMap} from './roles';\nimport {Roles, JobAbbreviations, RoleColours} from './types';\n\nexport default function jobColours (job: JobAbbreviations): RoleColours {\n  const role = jobRoleMap[job];\n  return RoleColours[role] || RoleColours.default;\n};","import {Roles, JobAbbreviations} from './types';\n\nexport const roleJobMap = {\n  [Roles.HEALER]: [\n    JobAbbreviations.WHM,\n    JobAbbreviations.SCH,\n    JobAbbreviations.AST\n  ],\n  [Roles.TANK]: [\n    JobAbbreviations.PLD,\n    JobAbbreviations.WAR,\n    JobAbbreviations.DRK,\n    JobAbbreviations.GNB,\n  ],\n  [Roles.DPS]: [\n    JobAbbreviations.SMN,\n    JobAbbreviations.BRD,\n    JobAbbreviations.DRG,\n    JobAbbreviations.MNK,\n    JobAbbreviations.NIN,\n    JobAbbreviations.BLM,\n    JobAbbreviations.MCH,\n    JobAbbreviations.SAM,\n    JobAbbreviations.RDM,\n    JobAbbreviations.DNC,\n  ]\n}\n\nexport const jobRoleMap = {\n  [JobAbbreviations.WHM]: Roles.HEALER,\n  [JobAbbreviations.SCH]: Roles.HEALER,\n  [JobAbbreviations.AST]: Roles.HEALER,\n  [JobAbbreviations.PLD]: Roles.TANK,\n  [JobAbbreviations.WAR]: Roles.TANK,\n  [JobAbbreviations.DRK]: Roles.TANK,\n  [JobAbbreviations.GNB]: Roles.TANK,\n  [JobAbbreviations.SMN]: Roles.DPS,\n  [JobAbbreviations.BRD]: Roles.DPS,\n  [JobAbbreviations.DRG]: Roles.DPS,\n  [JobAbbreviations.MNK]: Roles.DPS,\n  [JobAbbreviations.NIN]: Roles.DPS,\n  [JobAbbreviations.BLM]: Roles.DPS,\n  [JobAbbreviations.MCH]: Roles.DPS,\n  [JobAbbreviations.SAM]: Roles.DPS,\n  [JobAbbreviations.RDM]: Roles.DPS,\n  [JobAbbreviations.DNC]: Roles.DPS,\n}","/**\n * EncounterOptions + CombatantOptions taken from here:\n * https://github.com/billyvg/OverlayPlugin-themes/blob/master/app/coreUtils.js\n */\n\nexport enum EncounterOptions {\n  //Unknown purpose\n  ENCOUNTER_N = \"n\",\n  //Unknown purpose\n  ENCOUNTER_T = \"t\",\n  //Tends to be the first monster encountered during a parse OR \"Encounter\"\n  TITLE = \"title\",\n  //Duration in M =SS format\n  DURATION = \"duration\",\n  //Duration in S format\n  DURATION_SECONDS = \"DURATION\",\n  //Damage done by all parsed players and pets.\n  DAMAGE = \"damage\",\n  //Millions of damage done by all parsed players and pets.\n  DAMAGE_MILLIONS = \"damage-m\",\n  //Thousands of damage done by all parsed players and pets. Whole Number\n  DAMAGE_ROUNDED_THOUSANDS = \"DAMAGE-k\",\n  //Millions of damage done by all parsed players and pets. Whole Number\n  DAMAGE_ROUNDED_MILLIONS = \"DAMAGE-m\",\n  //DPS done by all parsed players and pets. Seems identical to encdps\n  DPS = \"dps\",\n  //DPS done by all parsed players and pets, rounded to whole number. Seems identical to ENCDPS\n  DPS_ROUNDED = \"DPS\",\n  //Thousands of DPS done by all parsed players and pets. Seems identical to ENCDPS-k\n  DPS_ROUNDED_THOUSANDS = \"DPS-k\",\n  //Number of landed hits done by all parsed players and pets.\n  HITS = \"hits\",\n  //Number of critical hits done by all parsed players and pets.\n  CRITICAL_HITS = \"crithits\",\n  //Overall crit percentage of all parsed players and pets.\n  CRITICAL_PERCENTAGE = \"crithit%\",\n  //Overall misses performed by all parsed players and pets.\n  MISSES = \"misses\",\n  //Unknown purpose\n  HIT_FAILED = \"hitfailed\",\n  //Overall number of attempted offensive actions by all parsed players and pets.\n  SWINGS = \"swings\",\n  //This value is incorrect as of 7/30/2015. If you want true accuracy, do hits/swings.\n  //Overall % chance to hit for all parsed players and pets.\n  TO_HIT = \"tohit\",\n  //Overall % chance to hit for all parsed players and pets, rounded to whole number.\n  TO_HIT_ROUNDED = \"TOHIT\",\n  //The highest damaging attack performed by all players and pets parsed. Form of SOURCE-ABILITY NAME-DAMAGE\n  MAX_HIT = \"maxhit\",\n  //The highest damaging attack performed by all players and pets parsed. Form of DAMAGE\n  MAX_HIT_SHORT = \"MAXHIT\",\n  //The total amount of health attempted to be restored by all players and pets parsed.\n  HEALED = \"healed\",\n  //The total HPS attempted to be performed by all players and pets parsed.\n  HPS = \"enchps\",\n  //The total HPS attempted to be performed by all players and pets parsed, rounded to whole number.\n  HPS_ROUNDED = \"ENCHPS\",\n  //The total HPS in thousands attempted to be performed by all players and pets parsed.\n  HPS_ROUNDED_THOUSANDS = \"ENCHPS-k\",\n  //The total critical heals performed by all players and pets parsed.\n  CRITICAL_HEALS = \"critheals\",\n  //The total critical heal rate performed by all players and pets parsed.\n  CRITICAL_HEALS_PERCENTAGE = \"critheal%\",\n  //The total number of healing actions performed by all players and pets parsed.\n  HEALS = \"heals\",\n  //The total number of cures/dispells performed by all players and pets parsed.\n  CURES = \"cures\",\n  //The highest healed amount performed by all players and pets parsed. Form of SOURCE-ABILITY NAME-HEALED. Appears idential to maxhealward\n  MAX_HEAL = \"maxheal\",\n  //The highest healed amount performed by all players and pets parsed. Form of HEALED. Appears identical to MAXHEALWARD.\n  MAX_HEAL_SIMPLE = \"MAXHEAL\",\n  //Total damage taken accross all players and pets parsed.\n  DAMAGE_TAKEN = \"damagetaken\",\n  //Total healing recieved taken accross all players and pets parsed.\n  HEALS_TAKEN = \"healstaken\",\n  //Unknown Purpose\n  POWER_DRAIN = \"powerdrain\",\n  //I think this is mana regenerated throughout fight, by all parsed players and pets (I don't think pets have mana).\n  POWER_HEAL = \"powerheal\",\n  //Number of kills performed by all parsed players and pets.\n  KILLS = \"kills\",\n  //Number of deaths accross all players and pets.\n  DEATHS = \"deaths\",\n  //Current zone the parser is in.\n  CURRENT_ZONE_NAME = \"CurrentZoneName\",\n  //DPS of all parsed players and pets over the last 10 seconds, rounded to nearest whole number.\n  DPS_10_SECONDS = \"Last10DPS\",\n  //DPS of all parsed players and pets over the last 30 seconds, rounded to nearest whole number.\n  DPS_30_SECONDS = \"Last30DPS\",\n  //DPS of all parsed players and pets over the last 60 seconds, rounded to nearest whole number.\n  DPS_60_SECONDS = \"Last60DPS\"\n}\n\nexport enum CombatantOptions {\n  //Unknown purpose\n  COMBATANT_N = \"n\",\n  //Unknown purpose\n  COMBATANT_T = \"t\",\n  //The player, or pet, this data was gathered from.\n  NAME = \"name\",\n  //Duration in M =SS format that this entity participated in combat.\n  DURATION = \"duration\",\n  //Duration in S format that this entity participanted in combat.\n  DURATION_SECONDS = \"DURATION\",\n  //Damage done by entity.\n  DAMAGE = \"damage\",\n  //Millions of damage done by entity.\n  DAMAGE_MILLIONS = \"damage-m\",\n  //Thousands of damage done by entity. Whole Number\n  DAMAGE_ROUNDED_THOUSANDS = \"DAMAGE-k\",\n  //Millions of damage done by entity. Whole Number\n  DAMAGE_ROUNDED_MILLIONS = \"DAMAGE-m\",\n  //Percentage of overall damage this player contributed.\n  DAMAGE_PERCENT = \"damage%\",\n  //DPS done by entity. Seems identical to dps\n  DPS = \"encdps\",\n  //DPS done by entity, rounded to whole number. Seems identical to DPS\n  DPS_ROUNDED = \"ENCDPS\",\n  //Thousands of DPS done by entity. Seems identical to DPS-k\n  DPS_ROUNDED_THOUSANDS = \"ENCDPS-k\",\n  //Number of landed hits done by entity.\n  HITS = \"hits\",\n  //Number of critical hits done by entity.\n  CRITICAL_HITS = \"crithits\",\n  //Overall crit percentage of entity.\n  CRITICAL_PERCENTAGE = \"crithit%\",\n  //Overall misses performed by entity.\n  MISSES = \"misses\",\n  //Unknown purpose\n  HIT_FAILED = \"hitfailed\",\n  //Overall number of attempted offensive actions by entity.\n  SWINGS = \"swings\",\n  //This value is incorrect as of 7/30/2015. If you want true accuracy, do hits/swings.\n  //Overall % chance to hit for entity.\n  TO_HIT = \"tohit\",\n  //Overall % chance to hit for entity, rounded to whole number.\n  TO_HIT_ROUNDED = \"TOHIT\",\n  //The highest damaging attack performed by all players and pets parsed. Form of SOURCE-ABILITY NAME-DAMAGE\n  MAX_HIT = \"maxhit\",\n  //The highest damaging attack performed by all players and pets parsed. Form of DAMAGE\n  MAX_HIT_SHORT = \"MAXHIT\",\n  //The total amount of health attempted to be restored by all players and pets parsed.\n  HEALED = \"healed\",\n  //Percentage of overall attempted healing this player contributed.\n  HEALED_PERCENT = \"healed%\",\n  //The total HPS attempted to be performed by all players and pets parsed.\n  HPS = \"enchps\",\n  //The total HPS attempted to be performed by all players and pets parsed, rounded to whole number.\n  HPS_ROUNDED = \"ENCHPS\",\n  //The total HPS in thousands attempted to be performed by all players and pets parsed.\n  HPS_ROUNDED_THOUSANDS = \"ENCHPS-k\",\n  //The total critical heals performed by all players and pets parsed.\n  CRITICAL_HEALS = \"critheals\",\n  //The total critical heal rate performed by all players and pets parsed.\n  CRITICAL_HEALS_PERCENTAGE = \"critheal%\",\n  //The total number of healing actions performed by all players and pets parsed.\n  HEALS = \"heals\",\n  //The total number of cures/dispells performed by all players and pets parsed.\n  CURES = \"cures\",\n  //The highest healed amount performed by all players and pets parsed. Form of SOURCE-ABILITY NAME-HEALED. Appears idential to maxhealward\n  MAX_HEAL = \"maxheal\",\n  //The highest healed amount performed by all players and pets parsed. Form of HEALED. Appears identical to MAXHEALWARD.\n  MAX_HEAL_SIMPLE = \"MAXHEAL\",\n  //Total damage taken accross all players and pets parsed.\n  DAMAGE_TAKEN = \"damagetaken\",\n  //Total healing recieved taken accross all players and pets parsed.\n  HEALS_TAKEN = \"healstaken\",\n  //Unknown Purpose\n  POWER_DRAIN = \"powerdrain\",\n  //I think this is mana regenerated throughout fight, by entity (I don't think pets have mana).\n  POWER_HEAL = \"powerheal\",\n  //Number of kills performed by entity.\n  KILLS = \"kills\",\n  //Number of deaths accross all players and pets.\n  DEATHS = \"deaths\",\n  //I think this is supposed to be how much Threat this player/pet currently has, but it's broken and is always 0 as of 7/30/2015.\n  THREAT_STRENGTH = \"threatstr\",\n  //I think this is supposed to be how far from top threat this player/pet currently is, but it's broken and is alway +(0)/0/-(0)/0 as of 7/30/2015\n  THREAT_DELTA = \"threatdelta\",\n  //String representation of the abbreviated job of the player. Ex. \"Sch\"\n  JOB = \"Job\",\n  //Percentage of attacks entity has performed.\n  PARRY_RATE = \"ParryPct\",\n  //Percentage of blocks entity has performed.\n  BLOCK_RATE = \"BlockPct\",\n  //I think this is the percentage of attacks the have landed on the entity, but I am not certain.\n  INC_TO_HIT = \"IncToHit\",\n  //The amount of healing this entity has performed that was unnecessary.\n  OVERHEAL_PERCENT = \"OverHealPct\",\n  //Seems identical to JOB except this field is populated if the entity is a Chocobo, whereas JOB is not. Otherwise, I can't find a difference. (This might apply to pets too)\n  JOB_OR_NAME = \"JobOrName\",\n  //DPS of entity over the last 10 seconds, rounded to nearest whole number.\n  DPS_10_SECONDS = \"Last10DPS\",\n  //DPS of entity over the last 30 seconds, rounded to nearest whole number.\n  DPS_30_SECONDS = \"Last30DPS\",\n  //DPS of entity over the last 60 seconds, rounded to nearest whole number.\n  DPS_60_SECONDS = \"Last60DPS\",\n  //The following are truncations of the entities name.\n  NAME_TRUNC3 = \"NAME3\",\n  NAME_TRUNC4 = \"NAME4\",\n  NAME_TRUNC5 = \"NAME5\",\n  NAME_TRUNC6 = \"NAME6\",\n  NAME_TRUNC7 = \"NAME7\",\n  NAME_TRUNC8 = \"NAME8\",\n  NAME_TRUNC9 = \"NAME9\",\n  NAME_TRUNC10 = \"NAME10\",\n  NAME_TRUNC11 = \"NAME11\",\n  NAME_TRUNC12 = \"NAME12\",\n  NAME_TRUNC13 = \"NAME13\",\n  NAME_TRUNC14 = \"NAME14\",\n  NAME_TRUNC15 = \"NAME15\",\n  CUSTOM_ACTUAL_HEALING = \"custom_actual_healing\",\n}\n\nexport enum JobAbbreviations {\n  'PLD' = 'PLD',\n  'WAR' = 'WAR',\n  'DRK' = 'DRK',\n  'GNB' = 'GNB',\n  'SCH' = 'SCH',\n  'AST' = 'AST',\n  'WHM' = 'WHM',\n  'SMN' = 'SMN',\n  'BRD' = 'BRD',\n  'DRG' = 'DRG',\n  'MNK' = 'MNK',\n  'NIN' = 'NIN',\n  'BLM' = 'BLM',\n  'MCH' = 'MCH',\n  'SAM' = 'SAM',\n  'RDM' = 'RDM',\n  'DNC' = 'DNC',\n}\n\nexport enum Roles {\n  'HEALER' = 'HEALER',\n  'TANK' = 'TANK',\n  'RANGED PHYSICAL DPS' = 'RANGED PHYSICAL DPS',\n  'MELEE PHYSICAL DPS' = 'MELEE PHYSICAL DPS',\n  'RANGED MAGIC DPS' = 'RANGED MAGIC DPS',\n  'DPS' = 'DPS',\n}\n\nexport enum RoleColours {\n  'HEALER' = 'green',\n  'TANK' = 'blue',\n  'DPS' = 'red',\n  'default' = 'grey'\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAWA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAcA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;;;;;;AArBA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAkBA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAAA;AAAA;AASA;;;;AApDA;AACA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AA0BA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}