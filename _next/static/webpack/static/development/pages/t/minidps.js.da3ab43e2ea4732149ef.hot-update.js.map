{"version":3,"file":"static/webpack/static/development/pages/t/minidps.js.da3ab43e2ea4732149ef.hot-update.js","sources":["webpack:///./components/DragCorner.tsx","webpack:///./pages/t/minidps.tsx"],"sourcesContent":["export default () => (\n  <div style={{position: 'absolute', background: 'grey', width: 20, height: 20, bottom: 0, right: 0}}></div>\n)","import React from 'react';\nimport DragCorner from '../../components/DragCorner';\nimport simulator from '../../util/simulator';\nimport jobColours from '../../util/colours'\nimport {CombatantOptions, EncounterOptions} from '../../util/types';\n\ninterface State {\n  Combatant?: Record<string, Partial<Record<CombatantOptions, string>>>;\n  Encounter?: Partial<Record<EncounterOptions, string>>;\n  isActive?: boolean;\n}\n\nexport default class Minidps extends React.Component<State> {\n  state: State = {};\n  simulator?: NodeJS.Timeout;\n  componentDidMount () {\n    if (typeof window === 'undefined') return;\n    document.addEventListener('onOverlayDataUpdate', this.onOverlayDataUpdate);\n    window.addEventListener('message', (e) => {\n      if (e.data.type === 'onOverlayDataUpdate') {\n        this.onOverlayDataUpdate(e.data);\n      }\n    });\n    if (window.location.search.includes('simulator')) {\n      this.simulator = simulator(1000);\n    }\n  }\n  componentWillUnmount () {\n    if (simulator) clearInterval(this.simulator);\n  }\n  onOverlayDataUpdate = (data: any) => {\n    this.setState(data.detail);\n  }\n  renderCombatant = ([k, v]) => {\n    const upperJob = (v.Job || '').toUpperCase();\n    const jobColour = jobColours(upperJob);\n    return (\n      <div style={{float: 'left', padding: '0 15px', textAlign: 'center', color: '#FFFFFF', fontWeight: 'bold', textShadow: `0 0 5px ${jobColour}`}} key={v.name}>\n        <div style={{fontSize: '0.8em'}}>{v.name} ({(v.Job || '').toUpperCase()})</div>\n        <div>{v.encdps}</div>\n      </div>\n    );\n  }\n  render () {\n    const {Combatant} = this.state;\n    return (\n      <>\n        <style global jsx>{`\n          body {\n            font-family: sans-serif;\n          }\n        `}</style>\n        <DragCorner />\n        {Combatant ? Object.entries(Combatant).sort(([_k1, v1], [_k2, v2]) => Number(v2.encdps) - Number(v1.encdps)).map(this.renderCombatant) : null}\n      </>\n    );\n  }\n}\n\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;;;;;;;AACA;AACA;;;AAgBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;;AA5BA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAcA;AAAA;AAEA;AACA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;;;;AA5CA;AACA;;;;;A","sourceRoot":""}